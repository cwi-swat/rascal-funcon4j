initialise-binding(initialise-storing(initialise-giving(finalise-failing(accumulate(accumulate(map(tuple("D", else(bound-directly("D"), fresh-link(values)))), recursive(set("I"), accumulate(bind("I", give(bound-directly("I"), sequential(else(sequential(effect(follow-if-link(given)), set-link(given, merge-classes(follow-if-link(given), class(thunk(closure(reference(object(fresh-atom, "I", collateral())))), collateral(map(tuple("call", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(give(force(class-instantiator(bound("D"))), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "api"), tuple(given)))))))))))))), set-link(given, class(thunk(closure(reference(object(fresh-atom, "I", collateral())))), collateral(map(tuple("call", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(give(force(class-instantiator(bound("D"))), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "api"), tuple(given))))))))))))), given)))))), collateral(map(tuple("i", allocate-initialised-variable(pointers(objects), pointer-null)))), sequential(assign(bound("i"), force(class-instantiator(bound("I")))), map()), accumulate(map(), recursive(set("D"), accumulate(bind("D", give(bound-directly("D"), sequential(else(sequential(effect(follow-if-link(given)), set-link(given, merge-classes(follow-if-link(given), class(thunk(closure(reference(object(fresh-atom, "D", collateral())))), collateral(map(tuple("api", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(1))))))))))), set-link(given, class(thunk(closure(reference(object(fresh-atom, "D", collateral())))), collateral(map(tuple("api", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(1)))))))))), given)))))), sequential(print(give(assigned(bound("i")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "call"), tuple(given)))), print("\n"), map()), accumulate(map(), recursive(set("D"), accumulate(bind("D", give(bound-directly("D"), sequential(else(sequential(effect(follow-if-link(given)), set-link(given, merge-classes(follow-if-link(given), class(thunk(closure(reference(object(fresh-atom, "D", collateral())))), collateral(map(tuple("api", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(2))))))))))), set-link(given, class(thunk(closure(reference(object(fresh-atom, "D", collateral())))), collateral(map(tuple("api", function(closure(scope(collateral(match(given, tuple(pattern(abstraction(map(tuple("this", allocate-initialised-variable(pointers(objects), given))))))), object-single-inheritance-feature-map(checked(dereference(first(tuple-elements(given))))), collateral()), sequential(2)))))))))), given)))))), sequential(print(give(assigned(bound("i")), apply(lookup(class-name-single-inheritance-feature-map(object-class-name(checked(dereference(given)))), "call"), tuple(given)))), print("\n"), map()))))))