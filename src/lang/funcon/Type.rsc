module lang::funcon::Type

data FunCon
  = \type(str t)
  | unknownType()
  | \tag(str t)
  | typeVar(str tv)
  | clVariant(str tagName, FunCon exp)
  | meta(str m)
  | nomTag(FunCon token)
  | nomVal(FunCon nomTag, FunCon val)
  | nomValSelect(FunCon nomTag, FunCon nomVal)
  | scopeNominalCoercion(FunCon type1, FunCon type2, FunCon abs)
  | depends(FunCon type1, FunCon type2)
  | typed(FunCon exp, FunCon \type)
  | tupleType()
  | tupleType(FunCon x)
  | tupleType(FunCon x1, FunCon x2)
  | tupleType(FunCon x1, FunCon x2, FunCon x3)
  | tupleTypePrefix(FunCon x, FunCon tup)
  | projectType(FunCon index, FunCon tup)
  | boundType(FunCon id)
  | freshToken()
  | newType(FunCon name)
  | typeDef(FunCon id, FunCon \type)
  | restrictDomain(FunCon abs, FunCon \type)
  | pattAtType(FunCon patt, FunCon \type)
  | variantMatch(FunCon \tag, FunCon variant, FunCon patt)
  ;